// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  email          String          @unique
  role           Role            @default(USER)
  password       Password?
  forgotPassword ForgotPassword?
  resetPassword  ResetPassword[]
  books          Book[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Book {
  id        String   @id @default(uuid())
  title     String   @unique @db.VarChar(50)
  photoUrl  String   @db.LongText
  s3Key     String   @unique
  slug      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  id        String   @id @default(uuid())
  hash      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForgotPassword {
  id                     String   @id @default(uuid())
  forgotPasswordQuestion String
  forgotPasswordAnswer   String
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                 String   @unique
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model ResetPassword {
  id                   String   @id @default(uuid())
  resetPasswordToken   String   @unique
  resetPasswordExpired DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               String
}
